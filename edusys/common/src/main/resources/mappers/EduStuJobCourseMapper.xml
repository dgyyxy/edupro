<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.common.dao.mapper.EduStuJobCourseMapper">
  <resultMap id="BaseResultMap" type="com.edu.common.dao.model.EduStuJobCourse">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="stu_id" jdbcType="INTEGER" property="stuId" />
    <result column="job_id" jdbcType="INTEGER" property="jobId" />
    <result column="course_id" jdbcType="INTEGER" property="courseId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="time" jdbcType="INTEGER" property="time" />
    <result column="favorite" jdbcType="INTEGER" property="favorite" />
    <result column="course_num" jdbcType="INTEGER" property="courseNum" />
    <result column="total_course" jdbcType="INTEGER" property="totalCourse" />
    <result column="jobName" jdbcType="VARCHAR" property="jobName" />
    <result column="courseName" jdbcType="VARCHAR" property="courseName" />
    <result column="duration" jdbcType="INTEGER" property="duration" />
    <result column="courseContent" jdbcType="VARCHAR" property="courseContent" />
    <result column="picture" jdbcType="VARCHAR" property="picture" />
    <result column="uriStr" jdbcType="VARCHAR" property="uriStr" />
    <result column="timeval" jdbcType="INTEGER" property="timeval" />
    <result column="studycount" jdbcType="INTEGER" property="studycount" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, stu_id, job_id, course_id, status, time, favorite, course_num, total_course
  </sql>
  <select id="selectByExample" parameterType="com.edu.common.dao.model.EduStuJobCourseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from edu_stu_job_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>

  <select id="selectJobsByStuId" resultMap="BaseResultMap">
    select esjc.*,ej.time duration,ej.name jobName
    from edu_jobs ej left join edu_stu_job_course esjc on ej.id = esjc.job_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER}
    order by esjc.job_id desc
  </select>

  <select id="selectJobsByStuIdPage" resultMap="BaseResultMap">
    select esjc.*,ej.time duration,ej.name jobName,
    (select count(1) from edu_stu_job_course where stu_id=esjc.stu_id and job_id = esjc.job_id and total_course = 0) studycount
    from edu_jobs ej left join edu_stu_job_course esjc on ej.id = esjc.job_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER} and esjc.total_course > 0
    <if test="search!=null">
      and ej.name like CONCAT('%',#{search,jdbcType=VARCHAR},'%')
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>

  <select id="jobsCountByStuId" resultType="java.lang.Long">
    select count(1)
    from edu_jobs ej left join edu_stu_job_course esjc on ej.id = esjc.job_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER} and esjc.total_course > 0
    <if test="search!=null">
      and ej.name like CONCAT('%',#{search,jdbcType=VARCHAR},'%')
    </if>
  </select>

  <select id="selectCoursesByStuId" resultMap="BaseResultMap">
    select esjc.*,ec.time duration,ec.name courseName
    from edu_courseware ec left join edu_stu_job_course esjc on ec.id = esjc.course_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER} and esjc.job_id = #{jobId,jdbcType=INTEGER} and esjc.total_course=0 and esjc.status>0
  </select>

  <select id="selectCoursesByStuIdPage" resultMap="BaseResultMap">
    select esjc.*,ec.time duration,ec.name courseName
    from edu_courseware ec left join edu_stu_job_course esjc on ec.id = esjc.course_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER} and esjc.job_id = #{jobId,jdbcType=INTEGER} and esjc.total_course=0
    <if test="search!=null">
      and ec.name like CONCAT('%',#{search,jdbcType=VARCHAR},'%')
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>

  <select id="courseCountByStuId" resultType="java.lang.Long">
    select count(1)
    from edu_courseware ec left join edu_stu_job_course esjc on ec.id = esjc.course_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER} and esjc.job_id = #{jobId,jdbcType=INTEGER} and esjc.total_course=0
    <if test="search!=null">
      and ec.name like CONCAT('%',#{search,jdbcType=VARCHAR},'%')
    </if>
  </select>

  <select id="selectFavoriteList" resultMap="BaseResultMap">
    select esjc.*,ec.time duration,ec.name courseName,ec.content courseContent,ec.picture picture,ec.uri_str uriStr,ec.time timeval
    from edu_courseware ec left join edu_stu_job_course esjc on ec.id = esjc.course_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER}
    and esjc.favorite = 1 and esjc.total_course=0
    <if test="courseName!=null">
      and ec.name like CONCAT('%',#{courseName,jdbcType=VARCHAR},'%')
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>

  <select id="favoriteCountBy" resultType="java.lang.Long">
    select count(1)
    from edu_courseware ec left join edu_stu_job_course esjc on ec.id = esjc.course_id
    where esjc.stu_id = #{stuId,jdbcType=INTEGER}
    and esjc.favorite = 1 and esjc.total_course=0
    <if test="courseName!=null">
      and ec.name like CONCAT('%',#{courseName,jdbcType=VARCHAR},'%')
    </if>
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from edu_stu_job_course
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from edu_stu_job_course
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.edu.common.dao.model.EduStuJobCourseExample">
    delete from edu_stu_job_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.edu.common.dao.model.EduStuJobCourse">
    insert into edu_stu_job_course (id, stu_id, job_id,
      course_id, status, time,
      favorite, course_num, total_course
      )
    values (#{id,jdbcType=INTEGER}, #{stuId,jdbcType=INTEGER}, #{jobId,jdbcType=INTEGER},
      #{courseId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{time,jdbcType=INTEGER},
      #{favorite,jdbcType=INTEGER}, #{courseNum,jdbcType=INTEGER}, #{totalCourse,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.edu.common.dao.model.EduStuJobCourse">
    insert into edu_stu_job_course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="stuId != null">
        stu_id,
      </if>
      <if test="jobId != null">
        job_id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="favorite != null">
        favorite,
      </if>
      <if test="courseNum != null">
        course_num,
      </if>
      <if test="totalCourse != null">
        total_course,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="stuId != null">
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="jobId != null">
        #{jobId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=INTEGER},
      </if>
      <if test="favorite != null">
        #{favorite,jdbcType=INTEGER},
      </if>
      <if test="courseNum != null">
        #{courseNum,jdbcType=INTEGER},
      </if>
      <if test="totalCourse != null">
        #{totalCourse,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.edu.common.dao.model.EduStuJobCourseExample" resultType="java.lang.Long">
    select count(*) from edu_stu_job_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update edu_stu_job_course
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.stuId != null">
        stu_id = #{record.stuId,jdbcType=INTEGER},
      </if>
      <if test="record.jobId != null">
        job_id = #{record.jobId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=INTEGER},
      </if>
      <if test="record.favorite != null">
        favorite = #{record.favorite,jdbcType=INTEGER},
      </if>
      <if test="record.courseNum != null">
        course_num = #{record.courseNum,jdbcType=INTEGER},
      </if>
      <if test="record.totalCourse != null">
        total_course = #{record.totalCourse,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update edu_stu_job_course
    set id = #{record.id,jdbcType=INTEGER},
      stu_id = #{record.stuId,jdbcType=INTEGER},
      job_id = #{record.jobId,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      time = #{record.time,jdbcType=INTEGER},
      favorite = #{record.favorite,jdbcType=INTEGER},
      course_num = #{record.courseNum,jdbcType=INTEGER},
      total_course = #{record.totalCourse,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.edu.common.dao.model.EduStuJobCourse">
    update edu_stu_job_course
    <set>
      <if test="stuId != null">
        stu_id = #{stuId,jdbcType=INTEGER},
      </if>
      <if test="jobId != null">
        job_id = #{jobId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=INTEGER},
      </if>
      <if test="favorite != null">
        favorite = #{favorite,jdbcType=INTEGER},
      </if>
      <if test="courseNum != null">
        course_num = #{courseNum,jdbcType=INTEGER},
      </if>
      <if test="totalCourse != null">
        total_course = #{totalCourse,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.edu.common.dao.model.EduStuJobCourse">
    update edu_stu_job_course
    set stu_id = #{stuId,jdbcType=INTEGER},
      job_id = #{jobId,jdbcType=INTEGER},
      course_id = #{courseId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      time = #{time,jdbcType=INTEGER},
      favorite = #{favorite,jdbcType=INTEGER},
      course_num = #{courseNum,jdbcType=INTEGER},
      total_course = #{totalCourse,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
</mapper>